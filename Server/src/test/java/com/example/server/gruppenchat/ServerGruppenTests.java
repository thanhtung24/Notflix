package com.example.server.gruppenchat;

import com.example.server.entities.DiskussionsGruppeEntity;
import com.example.server.entities.DiskussionsGruppenMitgliedEntity;
import com.example.server.entities.NutzerEntity;
import com.example.server.repository.*;
import com.example.server.service.DiskussionsGruppeService;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.junit.Test;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class ServerGruppenTests {

    //----------------
    @Mock
    private DiskussionsGruppeRepository diskussionsGruppeRepository;

    @Mock
    private DiskussionsGruppeChatNachrichtRepository diskussionsGruppeChatNachrichtRepository;

    @Mock
    private DiskussionsGruppenMitgliedRepository diskussionsGruppenMitgliedRepository;

    @Mock
    private NutzerRepository nutzerRepository;

    @InjectMocks
    private DiskussionsGruppeService zuTesten;

    @Test
    public void gruppeAnlegen(){
        Long gruppenErstellerId = 10L;
        Long nutzerId = 20L;
        Long gruppenId = 11L;
        DiskussionsGruppeEntity gruppe = new DiskussionsGruppeEntity("Marvel", gruppenErstellerId, false);

        zuTesten.gruppeAnlegen(gruppe);

        ArgumentCaptor<DiskussionsGruppeEntity> gruppeEntityArgumentCaptor = ArgumentCaptor.forClass(DiskussionsGruppeEntity.class);

        verify(diskussionsGruppeRepository).save(gruppeEntityArgumentCaptor.capture());

        DiskussionsGruppeEntity capturedValue = gruppeEntityArgumentCaptor.getValue();

        assertThat(capturedValue).isEqualTo(gruppe);

        //ist<DiskussionsGruppeEntity> diskussionsGruppen = new ArrayList<>(Arrays.asList(gruppe));

        //when(diskussionsrepository.findByNutzerIdAndGruppenId(nutzerId, gruppenId)).thenReturn(null);

    }

    @Test
    public void gruppenStatusVonOeffentlichAufPrivatAendern(){

        Long gruppenId = 10L;
        DiskussionsGruppeEntity gruppe = new DiskussionsGruppeEntity("DC-Fans", 101L, true);

        when(diskussionsGruppeRepository.getDiskussionsGruppeEntityById(gruppenId)).thenReturn(gruppe);

        boolean statusDerGruppe = zuTesten.privacyStatus(gruppenId);

        //verify(diskussionsGruppeRepository).getDiskussionsGruppeEntityById(gruppenId);

        assertTrue(statusDerGruppe);

        when(diskussionsGruppeRepository.getDiskussionsGruppeEntityById(gruppenId)).thenReturn(gruppe);

        zuTesten.privacyStatus(gruppenId);

        verify(diskussionsGruppeRepository, times(2)).getDiskussionsGruppeEntityById(gruppenId);

        zuTesten.gruppeBearbeiten(gruppenId, false);

        verify(diskussionsGruppeRepository, times(3)).getDiskussionsGruppeEntityById(gruppenId);

        boolean statusDerGruppeNachAendern = zuTesten.privacyStatus(gruppenId);

        assertFalse(statusDerGruppeNachAendern);


    }
    @Test
    public void alleNutzerEinerGruppe(){
        Long nutzerId = 11L;
        Long gruppenId = 120L;
        var nutzer = new NutzerEntity("Kunibert", "Heilliger", "1990", "mail@hot.de", "test123!",null);

        List<DiskussionsGruppenMitgliedEntity> mitgliedsListe = new ArrayList<>(Arrays.asList(
                new DiskussionsGruppenMitgliedEntity(nutzerId, 22L),
                new DiskussionsGruppenMitgliedEntity(nutzerId, 33L)
        ));

        List<DiskussionsGruppeEntity> alleGruppenWoNutzerMitgliedIst = new ArrayList<>(Arrays.asList(
                new DiskussionsGruppeEntity("Denkzettel", 101L, false),
                new DiskussionsGruppeEntity("DC-Fans", 101L, true)

        ));

        when(diskussionsGruppenMitgliedRepository.findAllByGruppenId(gruppenId)).thenReturn(mitgliedsListe);
        when(nutzerRepository.findNutzerEntityById(mitgliedsListe.get(0).getNutzerId())).thenReturn(nutzer);
        when(nutzerRepository.findNutzerEntityById(mitgliedsListe.get(1).getNutzerId())).thenReturn(nutzer);

        List<NutzerEntity> output = zuTesten.alleNutzerEinerGruppe(gruppenId);

        verify(diskussionsGruppenMitgliedRepository).findAllByGruppenId(gruppenId);

        verify(nutzerRepository, times(2)).findNutzerEntityById(anyLong());

        assertThat(output.get(0)).isEqualTo(nutzer);
        assertThat(output.get(1)).isEqualTo(nutzer);

    }
    @Test
    public void gruppenBeitreten(){
        Long nutzerId = 10L;
        Long gruppeId = 20L;

        //Nutzer soll vorher kein mitglied der gruppe sein, nach beitritt ist er mitglied

        when(diskussionsGruppenMitgliedRepository.findByNutzerIdAndGruppenId(nutzerId,gruppeId)).thenReturn(null);

        boolean istMitglied = zuTesten.mitgliedStatus(nutzerId, gruppeId);

        verify(diskussionsGruppenMitgliedRepository).findByNutzerIdAndGruppenId(nutzerId, gruppeId);

        //Nutzer sollte keine Mitglied sein
        assertFalse(istMitglied);

        DiskussionsGruppenMitgliedEntity neuerNutzer = new DiskussionsGruppenMitgliedEntity(nutzerId, gruppeId);

        zuTesten.gruppenMitgliedSpeichern(neuerNutzer);

        ArgumentCaptor<DiskussionsGruppenMitgliedEntity> neuerNutzerArgumentCaptor = ArgumentCaptor.forClass(DiskussionsGruppenMitgliedEntity.class);

        verify(diskussionsGruppenMitgliedRepository).save(neuerNutzerArgumentCaptor.capture());

        DiskussionsGruppenMitgliedEntity capturedValue = neuerNutzerArgumentCaptor.getValue();

        assertThat(capturedValue).isEqualTo(neuerNutzer);

        when(diskussionsGruppenMitgliedRepository.findByNutzerIdAndGruppenId(nutzerId,gruppeId)).thenReturn(capturedValue);

        boolean aktuellerMitgliedsStatus = zuTesten.mitgliedStatus(nutzerId, gruppeId);

        verify(diskussionsGruppenMitgliedRepository, times(2)).findByNutzerIdAndGruppenId(nutzerId, gruppeId);

        //Nutzer ist jetzt mitglied
        assertTrue(aktuellerMitgliedsStatus);

    }

}
